
LP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005f4  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800062  00800062  0000068a  2**0
                  ALLOC
  3 .stab         00001c08  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000067f  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002913  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000030  00000000  00000000  00002942  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000224  00000000  00000000  00002972  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000149  00000000  00000000  00002b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001eb  00000000  00000000  00002cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000054  00000000  00000000  00002ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000117  00000000  00000000  00002f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000aa  00000000  00000000  00003037  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  000030e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	46 c0       	rjmp	.+140    	; 0x96 <__vector_4>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e4 ef       	ldi	r30, 0xF4	; 244
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 36       	cpi	r26, 0x6B	; 107
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	3d d0       	rcall	.+122    	; 0xcc <main>
  52:	ce c2       	rjmp	.+1436   	; 0x5f0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Init>:
volatile uint8_t VoltageTime = 1;

void Init(void)
{
	//Настройка пинов
	DDRB = (1<<PB0); //PB0 на выход
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	87 bb       	out	0x17, r24	; 23
	//Предварительная настройка АЦП	
	ADMUX = (1<<ADLAR);				//Выравнивание влево
  5a:	80 e2       	ldi	r24, 0x20	; 32
  5c:	87 b9       	out	0x07, r24	; 7
	DIDR0 = (1<<ADC0D)|(1<<ADC1D);	//Отключаю триггера на входах АЦП
  5e:	84 e2       	ldi	r24, 0x24	; 36
  60:	84 bb       	out	0x14, r24	; 20
	ADCSRA = (1<<ADEN);				//Включаю АЦП
  62:	80 e8       	ldi	r24, 0x80	; 128
  64:	86 b9       	out	0x06, r24	; 6
	//Настойка TIMER0 для SEPIC
	TCCR0A = (1<<COM0A1)|(1<<WGM00)|(1<<WGM01);		//ШИМ на PB0/OC1A, FastRWM.
  66:	83 e8       	ldi	r24, 0x83	; 131
  68:	8a bd       	out	0x2a, r24	; 42
	//Настройка TIMER1 для ШИМ
	GTCCR = (1<<PWM1B)|(1<<COM1B0);
  6a:	80 e5       	ldi	r24, 0x50	; 80
  6c:	8c bd       	out	0x2c, r24	; 44
	TCCR1 = (1<<PWM1A)|(1<<COM1A1);
  6e:	80 e6       	ldi	r24, 0x60	; 96
  70:	80 bf       	out	0x30, r24	; 48
	PLLCSR = (1<<PLLE);					//Запуск асинхронного ВЧ осцилятора (64МГц)
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	87 bd       	out	0x27, r24	; 39
	while (((PLLCSR & (1<<PLOCK)) == 0)){}	//Жду выход ВЧ осцилятора в режим.
  76:	07 b4       	in	r0, 0x27	; 39
  78:	00 fe       	sbrs	r0, 0
  7a:	fd cf       	rjmp	.-6      	; 0x76 <Init+0x20>
	PLLCSR |= (1<<PCKE);				//Переключаю на асинхрон.
  7c:	87 b5       	in	r24, 0x27	; 39
  7e:	84 60       	ori	r24, 0x04	; 4
  80:	87 bd       	out	0x27, r24	; 39
	TCCR1 |= (1<<CS10);		//Запуск TIMER1 без пределителя, F = 64 МГц
  82:	80 b7       	in	r24, 0x30	; 48
  84:	81 60       	ori	r24, 0x01	; 1
  86:	80 bf       	out	0x30, r24	; 48
	TCCR0B |= (1<<CS00);	//Запуск TIMER0 без пределителя, F = 8 МГц
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE1);	//Разрешаю прерывания по переполнению TIMER1
  8e:	89 b7       	in	r24, 0x39	; 57
  90:	84 60       	ori	r24, 0x04	; 4
  92:	89 bf       	out	0x39, r24	; 57
  94:	08 95       	ret

00000096 <__vector_4>:
}

ISR( TIM1_OVF_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
	if (Count < 251)	//Отсчитываю 251 переполнение = 1 мс
  a2:	80 91 6a 00 	lds	r24, 0x006A
  a6:	8b 3f       	cpi	r24, 0xFB	; 251
  a8:	30 f4       	brcc	.+12     	; 0xb6 <__vector_4+0x20>
	{
		Count++;
  aa:	80 91 6a 00 	lds	r24, 0x006A
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 6a 00 	sts	0x006A, r24
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <__vector_4+0x2a>
	} 
	else
	{
		Count = 0;
  b6:	10 92 6a 00 	sts	0x006A, r1
		TimeForWork = 1;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 69 00 	sts	0x0069, r24
	}
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:

int main(void)
{
	Init();
  cc:	c4 df       	rcall	.-120    	; 0x56 <Init>
	OCR0A = 0x80;		    //Устанавливаю заполнение для SEPIC  D = 0.5
  ce:	80 e8       	ldi	r24, 0x80	; 128
  d0:	89 bd       	out	0x29, r24	; 41
				  }
			  } 
			  else
			  {
				  ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3)|(1<<REFS1)|(1<<REFS0)|(1<<REFS2));	//Подключаю канал PB5/ADC0, Vref = Vcc
				  HueArray = 0;
  d2:	0f 2e       	mov	r0, r31
  d4:	f6 e0       	ldi	r31, 0x06	; 6
  d6:	bf 2e       	mov	r11, r31
  d8:	f0 2d       	mov	r31, r0
				  {
					  ADCSRA |= (1<<ADSC);
					  while (ADCSRA & (1<<ADSC)){}
					  HueArray += ADCH;
				  }
				  Hue = ((HueArray/6) * 3.08) + 14; //3.08 - коэффициент растяжения, нужен для работы 4 пункта, 14 - калибровочный.
  da:	06 e0       	ldi	r16, 0x06	; 6
  dc:	10 e0       	ldi	r17, 0x00	; 0
				  VoltageTime = 1;
  de:	cc 24       	eor	r12, r12
  e0:	c3 94       	inc	r12
		  {
			  if (VoltageTime == 1)
			  {
				  ADMUX |= (1<<MUX0)|(1<<REFS1);	//Подключаю канал PB2/ADC1, устанавливаю Vref = 1.1в
				  _delay_ms(1);
				  VoltageArray = 0;
  e2:	0f 2e       	mov	r0, r31
  e4:	f5 e0       	ldi	r31, 0x05	; 5
  e6:	af 2e       	mov	r10, r31
  e8:	f0 2d       	mov	r31, r0
				  {
					  ADCSRA |= (1<<ADSC);
					  while (ADCSRA & (1<<ADSC)){}
					  VoltageArray += ADCH;
				  }
				  Voltage = VoltageArray/5;
  ea:	0f 2e       	mov	r0, r31
  ec:	f5 e0       	ldi	r31, 0x05	; 5
  ee:	ef 2e       	mov	r14, r31
  f0:	f1 2c       	mov	r15, r1
  f2:	f0 2d       	mov	r31, r0
			  TimeForWork = 0;
		  }
		  asm("sei");
			
			
		  switch ( (Hue - ( Hue % 255 )) / 255 )
  f4:	cf ef       	ldi	r28, 0xFF	; 255
  f6:	d0 e0       	ldi	r29, 0x00	; 0
			  case 3: {
				  if ( (DDRB & ((1<<Red)|(1<<Blue)|(1<<Green))) != ((1<<Red)|(1<<Blue)|(1<<Green)) )
				  {
					  DDRB |= (1<<Red)|(1<<Blue)|(1<<Green);
				  }
				  OCR1A = 0x80;
  f8:	68 94       	set
  fa:	dd 24       	eor	r13, r13
  fc:	d7 f8       	bld	r13, 7
{
	Init();
	OCR0A = 0x80;		    //Устанавливаю заполнение для SEPIC  D = 0.5
	while(1)
    { 
		  asm("cli");
  fe:	f8 94       	cli
		  if (TimeForWork == 1)
 100:	80 91 69 00 	lds	r24, 0x0069
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	09 f0       	breq	.+2      	; 0x10a <main+0x3e>
 108:	70 c0       	rjmp	.+224    	; 0x1ea <main+0x11e>
		  {
			  if (VoltageTime == 1)
 10a:	80 91 60 00 	lds	r24, 0x0060
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	c1 f5       	brne	.+112    	; 0x182 <main+0xb6>
			  {
				  ADMUX |= (1<<MUX0)|(1<<REFS1);	//Подключаю канал PB2/ADC1, устанавливаю Vref = 1.1в
 112:	87 b1       	in	r24, 0x07	; 7
 114:	81 68       	ori	r24, 0x81	; 129
 116:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <main+0x50>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x56>
 122:	00 00       	nop
				  _delay_ms(1);
				  VoltageArray = 0;
 124:	10 92 67 00 	sts	0x0067, r1
 128:	10 92 66 00 	sts	0x0066, r1
 12c:	2a 2d       	mov	r18, r10
				  for (uint8_t i=0; i<5; i++)
				  {
					  ADCSRA |= (1<<ADSC);
 12e:	36 9a       	sbi	0x06, 6	; 6
					  while (ADCSRA & (1<<ADSC)){}
 130:	36 99       	sbic	0x06, 6	; 6
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0x64>
					  VoltageArray += ADCH;
 134:	35 b1       	in	r19, 0x05	; 5
 136:	80 91 66 00 	lds	r24, 0x0066
 13a:	90 91 67 00 	lds	r25, 0x0067
 13e:	83 0f       	add	r24, r19
 140:	91 1d       	adc	r25, r1
 142:	90 93 67 00 	sts	0x0067, r25
 146:	80 93 66 00 	sts	0x0066, r24
 14a:	21 50       	subi	r18, 0x01	; 1
			  if (VoltageTime == 1)
			  {
				  ADMUX |= (1<<MUX0)|(1<<REFS1);	//Подключаю канал PB2/ADC1, устанавливаю Vref = 1.1в
				  _delay_ms(1);
				  VoltageArray = 0;
				  for (uint8_t i=0; i<5; i++)
 14c:	81 f7       	brne	.-32     	; 0x12e <main+0x62>
				  {
					  ADCSRA |= (1<<ADSC);
					  while (ADCSRA & (1<<ADSC)){}
					  VoltageArray += ADCH;
				  }
				  Voltage = VoltageArray/5;
 14e:	80 91 66 00 	lds	r24, 0x0066
 152:	90 91 67 00 	lds	r25, 0x0067
 156:	b7 01       	movw	r22, r14
 158:	37 d2       	rcall	.+1134   	; 0x5c8 <__udivmodhi4>
 15a:	60 93 68 00 	sts	0x0068, r22
				  VoltageTime = 0;
 15e:	10 92 60 00 	sts	0x0060, r1
				  if (Voltage > Vmax)
 162:	80 91 68 00 	lds	r24, 0x0068
 166:	86 3b       	cpi	r24, 0xB6	; 182
 168:	20 f0       	brcs	.+8      	; 0x172 <main+0xa6>
				  {
					  OCR0A--;
 16a:	89 b5       	in	r24, 0x29	; 41
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	89 bd       	out	0x29, r24	; 41
 170:	3a c0       	rjmp	.+116    	; 0x1e6 <main+0x11a>
				  } 
				  else
				  {
					  if (Voltage < Vmin)
 172:	80 91 68 00 	lds	r24, 0x0068
 176:	8f 3a       	cpi	r24, 0xAF	; 175
 178:	b0 f5       	brcc	.+108    	; 0x1e6 <main+0x11a>
					  {
						  OCR0A++;
 17a:	89 b5       	in	r24, 0x29	; 41
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	89 bd       	out	0x29, r24	; 41
 180:	32 c0       	rjmp	.+100    	; 0x1e6 <main+0x11a>
					  }
				  }
			  } 
			  else
			  {
				  ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3)|(1<<REFS1)|(1<<REFS0)|(1<<REFS2));	//Подключаю канал PB5/ADC0, Vref = Vcc
 182:	87 b1       	in	r24, 0x07	; 7
 184:	80 72       	andi	r24, 0x20	; 32
 186:	87 b9       	out	0x07, r24	; 7
				  HueArray = 0;
 188:	10 92 63 00 	sts	0x0063, r1
 18c:	10 92 62 00 	sts	0x0062, r1
 190:	2b 2d       	mov	r18, r11
				  for (uint8_t i=0; i<6; i++)
				  {
					  ADCSRA |= (1<<ADSC);
 192:	36 9a       	sbi	0x06, 6	; 6
					  while (ADCSRA & (1<<ADSC)){}
 194:	36 99       	sbic	0x06, 6	; 6
 196:	fe cf       	rjmp	.-4      	; 0x194 <main+0xc8>
					  HueArray += ADCH;
 198:	35 b1       	in	r19, 0x05	; 5
 19a:	80 91 62 00 	lds	r24, 0x0062
 19e:	90 91 63 00 	lds	r25, 0x0063
 1a2:	83 0f       	add	r24, r19
 1a4:	91 1d       	adc	r25, r1
 1a6:	90 93 63 00 	sts	0x0063, r25
 1aa:	80 93 62 00 	sts	0x0062, r24
 1ae:	21 50       	subi	r18, 0x01	; 1
			  } 
			  else
			  {
				  ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3)|(1<<REFS1)|(1<<REFS0)|(1<<REFS2));	//Подключаю канал PB5/ADC0, Vref = Vcc
				  HueArray = 0;
				  for (uint8_t i=0; i<6; i++)
 1b0:	81 f7       	brne	.-32     	; 0x192 <main+0xc6>
				  {
					  ADCSRA |= (1<<ADSC);
					  while (ADCSRA & (1<<ADSC)){}
					  HueArray += ADCH;
				  }
				  Hue = ((HueArray/6) * 3.08) + 14; //3.08 - коэффициент растяжения, нужен для работы 4 пункта, 14 - калибровочный.
 1b2:	80 91 62 00 	lds	r24, 0x0062
 1b6:	90 91 63 00 	lds	r25, 0x0063
 1ba:	b8 01       	movw	r22, r16
 1bc:	05 d2       	rcall	.+1034   	; 0x5c8 <__udivmodhi4>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	09 d1       	rcall	.+530    	; 0x3d6 <__floatunsisf>
 1c4:	28 eb       	ldi	r18, 0xB8	; 184
 1c6:	3e e1       	ldi	r19, 0x1E	; 30
 1c8:	45 e4       	ldi	r20, 0x45	; 69
 1ca:	50 e4       	ldi	r21, 0x40	; 64
 1cc:	92 d1       	rcall	.+804    	; 0x4f2 <__mulsf3>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e6       	ldi	r20, 0x60	; 96
 1d4:	51 e4       	ldi	r21, 0x41	; 65
 1d6:	6f d0       	rcall	.+222    	; 0x2b6 <__addsf3>
 1d8:	d2 d0       	rcall	.+420    	; 0x37e <__fixunssfsi>
 1da:	70 93 65 00 	sts	0x0065, r23
 1de:	60 93 64 00 	sts	0x0064, r22
				  VoltageTime = 1;
 1e2:	c0 92 60 00 	sts	0x0060, r12
			  }
			  TimeForWork = 0;
 1e6:	10 92 69 00 	sts	0x0069, r1
		  }
		  asm("sei");
 1ea:	78 94       	sei
			
			
		  switch ( (Hue - ( Hue % 255 )) / 255 )
 1ec:	20 91 64 00 	lds	r18, 0x0064
 1f0:	30 91 65 00 	lds	r19, 0x0065
 1f4:	80 91 64 00 	lds	r24, 0x0064
 1f8:	90 91 65 00 	lds	r25, 0x0065
 1fc:	be 01       	movw	r22, r28
 1fe:	e4 d1       	rcall	.+968    	; 0x5c8 <__udivmodhi4>
 200:	a9 01       	movw	r20, r18
 202:	48 1b       	sub	r20, r24
 204:	59 0b       	sbc	r21, r25
 206:	ca 01       	movw	r24, r20
 208:	be 01       	movw	r22, r28
 20a:	de d1       	rcall	.+956    	; 0x5c8 <__udivmodhi4>
 20c:	61 30       	cpi	r22, 0x01	; 1
 20e:	71 05       	cpc	r23, r1
 210:	f9 f0       	breq	.+62     	; 0x250 <main+0x184>
 212:	40 f0       	brcs	.+16     	; 0x224 <main+0x158>
 214:	62 30       	cpi	r22, 0x02	; 2
 216:	71 05       	cpc	r23, r1
 218:	61 f1       	breq	.+88     	; 0x272 <__stack+0x13>
 21a:	63 30       	cpi	r22, 0x03	; 3
 21c:	71 05       	cpc	r23, r1
 21e:	09 f0       	breq	.+2      	; 0x222 <main+0x156>
 220:	6e cf       	rjmp	.-292    	; 0xfe <main+0x32>
 222:	3e c0       	rjmp	.+124    	; 0x2a0 <__stack+0x41>
		  {
			  case 0: {
				  if ( (DDRB & ((1<<Red)|(1<<Blue)|(1<<Green))) != ((1<<Red)|(1<<Green)) )
 224:	87 b3       	in	r24, 0x17	; 23
 226:	8a 71       	andi	r24, 0x1A	; 26
 228:	82 31       	cpi	r24, 0x12	; 18
 22a:	21 f0       	breq	.+8      	; 0x234 <main+0x168>
				  {
					  DDRB |= (1<<Red)|(1<<Green);
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	82 61       	ori	r24, 0x12	; 18
 230:	87 bb       	out	0x17, r24	; 23
					  DDRB &= ~(1<<Blue);
 232:	bb 98       	cbi	0x17, 3	; 23
				  }
				  OCR1A = 255 - (Hue % 255); //Красный
 234:	80 91 64 00 	lds	r24, 0x0064
 238:	90 91 65 00 	lds	r25, 0x0065
 23c:	be 01       	movw	r22, r28
 23e:	c4 d1       	rcall	.+904    	; 0x5c8 <__udivmodhi4>
 240:	80 95       	com	r24
 242:	8e bd       	out	0x2e, r24	; 46
				  OCR1B = Hue;		 //Зеленый
 244:	80 91 64 00 	lds	r24, 0x0064
 248:	90 91 65 00 	lds	r25, 0x0065
 24c:	8b bd       	out	0x2b, r24	; 43
				  break;
 24e:	57 cf       	rjmp	.-338    	; 0xfe <main+0x32>
			  }
			  case 1: {
				  if ( (DDRB & ((1<<Red)|(1<<Green)|(1<<Blue))) != ((1<<Green)|(1<<Blue)) )
 250:	87 b3       	in	r24, 0x17	; 23
 252:	8a 71       	andi	r24, 0x1A	; 26
 254:	88 31       	cpi	r24, 0x18	; 24
 256:	21 f0       	breq	.+8      	; 0x260 <__stack+0x1>
				  {
					  DDRB |= (1<<Green)|(1<<Blue);
 258:	87 b3       	in	r24, 0x17	; 23
 25a:	88 61       	ori	r24, 0x18	; 24
 25c:	87 bb       	out	0x17, r24	; 23
					  DDRB &= ~(1<<Red);
 25e:	b9 98       	cbi	0x17, 1	; 23
				  }
				  OCR1B = 255 - ( Hue % 255 ); //Синий, зеленый в инверсе				  
 260:	80 91 64 00 	lds	r24, 0x0064
 264:	90 91 65 00 	lds	r25, 0x0065
 268:	be 01       	movw	r22, r28
 26a:	ae d1       	rcall	.+860    	; 0x5c8 <__udivmodhi4>
 26c:	80 95       	com	r24
 26e:	8b bd       	out	0x2b, r24	; 43
				  break;
 270:	46 cf       	rjmp	.-372    	; 0xfe <main+0x32>
			  }
			  case 2: {
				  if ( (DDRB & ((1<<Red)|(1<<Green)|(1<<Blue))) != ((1<<Red)|(1<<Blue)) )
 272:	87 b3       	in	r24, 0x17	; 23
 274:	8a 71       	andi	r24, 0x1A	; 26
 276:	8a 30       	cpi	r24, 0x0A	; 10
 278:	21 f0       	breq	.+8      	; 0x282 <__stack+0x23>
				  {
					  DDRB |= (1<<Red)|(1<<Blue);
 27a:	87 b3       	in	r24, 0x17	; 23
 27c:	8a 60       	ori	r24, 0x0A	; 10
 27e:	87 bb       	out	0x17, r24	; 23
					  DDRB &= ~(1<<Green);
 280:	bc 98       	cbi	0x17, 4	; 23
				  }
				  OCR1A = Hue % 255; //Красный
 282:	80 91 64 00 	lds	r24, 0x0064
 286:	90 91 65 00 	lds	r25, 0x0065
 28a:	be 01       	movw	r22, r28
 28c:	9d d1       	rcall	.+826    	; 0x5c8 <__udivmodhi4>
 28e:	8e bd       	out	0x2e, r24	; 46
				  OCR1B = Hue % 255;	//Синий, он тоже инверсный
 290:	80 91 64 00 	lds	r24, 0x0064
 294:	90 91 65 00 	lds	r25, 0x0065
 298:	be 01       	movw	r22, r28
 29a:	96 d1       	rcall	.+812    	; 0x5c8 <__udivmodhi4>
 29c:	8b bd       	out	0x2b, r24	; 43
				  break;
 29e:	2f cf       	rjmp	.-418    	; 0xfe <main+0x32>
			  }
			  case 3: {
				  if ( (DDRB & ((1<<Red)|(1<<Blue)|(1<<Green))) != ((1<<Red)|(1<<Blue)|(1<<Green)) )
 2a0:	87 b3       	in	r24, 0x17	; 23
 2a2:	8a 71       	andi	r24, 0x1A	; 26
 2a4:	8a 31       	cpi	r24, 0x1A	; 26
 2a6:	19 f0       	breq	.+6      	; 0x2ae <__stack+0x4f>
				  {
					  DDRB |= (1<<Red)|(1<<Blue)|(1<<Green);
 2a8:	87 b3       	in	r24, 0x17	; 23
 2aa:	8a 61       	ori	r24, 0x1A	; 26
 2ac:	87 bb       	out	0x17, r24	; 23
				  }
				  OCR1A = 0x80;
 2ae:	de bc       	out	0x2e, r13	; 46
				  OCR1B = 0x80;
 2b0:	db bc       	out	0x2b, r13	; 43
				  break;
 2b2:	25 cf       	rjmp	.-438    	; 0xfe <main+0x32>

000002b4 <__subsf3>:
 2b4:	50 58       	subi	r21, 0x80	; 128

000002b6 <__addsf3>:
 2b6:	bb 27       	eor	r27, r27
 2b8:	aa 27       	eor	r26, r26
 2ba:	0e d0       	rcall	.+28     	; 0x2d8 <__addsf3x>
 2bc:	e0 c0       	rjmp	.+448    	; 0x47e <__fp_round>
 2be:	d1 d0       	rcall	.+418    	; 0x462 <__fp_pscA>
 2c0:	30 f0       	brcs	.+12     	; 0x2ce <__addsf3+0x18>
 2c2:	d6 d0       	rcall	.+428    	; 0x470 <__fp_pscB>
 2c4:	20 f0       	brcs	.+8      	; 0x2ce <__addsf3+0x18>
 2c6:	31 f4       	brne	.+12     	; 0x2d4 <__addsf3+0x1e>
 2c8:	9f 3f       	cpi	r25, 0xFF	; 255
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <__addsf3+0x1a>
 2cc:	1e f4       	brtc	.+6      	; 0x2d4 <__addsf3+0x1e>
 2ce:	c6 c0       	rjmp	.+396    	; 0x45c <__fp_nan>
 2d0:	0e f4       	brtc	.+2      	; 0x2d4 <__addsf3+0x1e>
 2d2:	e0 95       	com	r30
 2d4:	e7 fb       	bst	r30, 7
 2d6:	bc c0       	rjmp	.+376    	; 0x450 <__fp_inf>

000002d8 <__addsf3x>:
 2d8:	e9 2f       	mov	r30, r25
 2da:	e2 d0       	rcall	.+452    	; 0x4a0 <__fp_split3>
 2dc:	80 f3       	brcs	.-32     	; 0x2be <__addsf3+0x8>
 2de:	ba 17       	cp	r27, r26
 2e0:	62 07       	cpc	r22, r18
 2e2:	73 07       	cpc	r23, r19
 2e4:	84 07       	cpc	r24, r20
 2e6:	95 07       	cpc	r25, r21
 2e8:	18 f0       	brcs	.+6      	; 0x2f0 <__addsf3x+0x18>
 2ea:	71 f4       	brne	.+28     	; 0x308 <__addsf3x+0x30>
 2ec:	9e f5       	brtc	.+102    	; 0x354 <__addsf3x+0x7c>
 2ee:	fa c0       	rjmp	.+500    	; 0x4e4 <__fp_zero>
 2f0:	0e f4       	brtc	.+2      	; 0x2f4 <__addsf3x+0x1c>
 2f2:	e0 95       	com	r30
 2f4:	0b 2e       	mov	r0, r27
 2f6:	ba 2f       	mov	r27, r26
 2f8:	a0 2d       	mov	r26, r0
 2fa:	0b 01       	movw	r0, r22
 2fc:	b9 01       	movw	r22, r18
 2fe:	90 01       	movw	r18, r0
 300:	0c 01       	movw	r0, r24
 302:	ca 01       	movw	r24, r20
 304:	a0 01       	movw	r20, r0
 306:	11 24       	eor	r1, r1
 308:	ff 27       	eor	r31, r31
 30a:	59 1b       	sub	r21, r25
 30c:	99 f0       	breq	.+38     	; 0x334 <__addsf3x+0x5c>
 30e:	59 3f       	cpi	r21, 0xF9	; 249
 310:	50 f4       	brcc	.+20     	; 0x326 <__addsf3x+0x4e>
 312:	50 3e       	cpi	r21, 0xE0	; 224
 314:	68 f1       	brcs	.+90     	; 0x370 <__addsf3x+0x98>
 316:	1a 16       	cp	r1, r26
 318:	f0 40       	sbci	r31, 0x00	; 0
 31a:	a2 2f       	mov	r26, r18
 31c:	23 2f       	mov	r18, r19
 31e:	34 2f       	mov	r19, r20
 320:	44 27       	eor	r20, r20
 322:	58 5f       	subi	r21, 0xF8	; 248
 324:	f3 cf       	rjmp	.-26     	; 0x30c <__addsf3x+0x34>
 326:	46 95       	lsr	r20
 328:	37 95       	ror	r19
 32a:	27 95       	ror	r18
 32c:	a7 95       	ror	r26
 32e:	f0 40       	sbci	r31, 0x00	; 0
 330:	53 95       	inc	r21
 332:	c9 f7       	brne	.-14     	; 0x326 <__addsf3x+0x4e>
 334:	7e f4       	brtc	.+30     	; 0x354 <__addsf3x+0x7c>
 336:	1f 16       	cp	r1, r31
 338:	ba 0b       	sbc	r27, r26
 33a:	62 0b       	sbc	r22, r18
 33c:	73 0b       	sbc	r23, r19
 33e:	84 0b       	sbc	r24, r20
 340:	ba f0       	brmi	.+46     	; 0x370 <__addsf3x+0x98>
 342:	91 50       	subi	r25, 0x01	; 1
 344:	a1 f0       	breq	.+40     	; 0x36e <__addsf3x+0x96>
 346:	ff 0f       	add	r31, r31
 348:	bb 1f       	adc	r27, r27
 34a:	66 1f       	adc	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	c2 f7       	brpl	.-16     	; 0x342 <__addsf3x+0x6a>
 352:	0e c0       	rjmp	.+28     	; 0x370 <__addsf3x+0x98>
 354:	ba 0f       	add	r27, r26
 356:	62 1f       	adc	r22, r18
 358:	73 1f       	adc	r23, r19
 35a:	84 1f       	adc	r24, r20
 35c:	48 f4       	brcc	.+18     	; 0x370 <__addsf3x+0x98>
 35e:	87 95       	ror	r24
 360:	77 95       	ror	r23
 362:	67 95       	ror	r22
 364:	b7 95       	ror	r27
 366:	f7 95       	ror	r31
 368:	9e 3f       	cpi	r25, 0xFE	; 254
 36a:	08 f0       	brcs	.+2      	; 0x36e <__addsf3x+0x96>
 36c:	b3 cf       	rjmp	.-154    	; 0x2d4 <__addsf3+0x1e>
 36e:	93 95       	inc	r25
 370:	88 0f       	add	r24, r24
 372:	08 f0       	brcs	.+2      	; 0x376 <__addsf3x+0x9e>
 374:	99 27       	eor	r25, r25
 376:	ee 0f       	add	r30, r30
 378:	97 95       	ror	r25
 37a:	87 95       	ror	r24
 37c:	08 95       	ret

0000037e <__fixunssfsi>:
 37e:	98 d0       	rcall	.+304    	; 0x4b0 <__fp_splitA>
 380:	88 f0       	brcs	.+34     	; 0x3a4 <__fixunssfsi+0x26>
 382:	9f 57       	subi	r25, 0x7F	; 127
 384:	90 f0       	brcs	.+36     	; 0x3aa <__fixunssfsi+0x2c>
 386:	b9 2f       	mov	r27, r25
 388:	99 27       	eor	r25, r25
 38a:	b7 51       	subi	r27, 0x17	; 23
 38c:	a0 f0       	brcs	.+40     	; 0x3b6 <__fixunssfsi+0x38>
 38e:	d1 f0       	breq	.+52     	; 0x3c4 <__fixunssfsi+0x46>
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	1a f0       	brmi	.+6      	; 0x3a0 <__fixunssfsi+0x22>
 39a:	ba 95       	dec	r27
 39c:	c9 f7       	brne	.-14     	; 0x390 <__fixunssfsi+0x12>
 39e:	12 c0       	rjmp	.+36     	; 0x3c4 <__fixunssfsi+0x46>
 3a0:	b1 30       	cpi	r27, 0x01	; 1
 3a2:	81 f0       	breq	.+32     	; 0x3c4 <__fixunssfsi+0x46>
 3a4:	9f d0       	rcall	.+318    	; 0x4e4 <__fp_zero>
 3a6:	b1 e0       	ldi	r27, 0x01	; 1
 3a8:	08 95       	ret
 3aa:	9c c0       	rjmp	.+312    	; 0x4e4 <__fp_zero>
 3ac:	67 2f       	mov	r22, r23
 3ae:	78 2f       	mov	r23, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	b8 5f       	subi	r27, 0xF8	; 248
 3b4:	39 f0       	breq	.+14     	; 0x3c4 <__fixunssfsi+0x46>
 3b6:	b9 3f       	cpi	r27, 0xF9	; 249
 3b8:	cc f3       	brlt	.-14     	; 0x3ac <__fixunssfsi+0x2e>
 3ba:	86 95       	lsr	r24
 3bc:	77 95       	ror	r23
 3be:	67 95       	ror	r22
 3c0:	b3 95       	inc	r27
 3c2:	d9 f7       	brne	.-10     	; 0x3ba <__fixunssfsi+0x3c>
 3c4:	3e f4       	brtc	.+14     	; 0x3d4 <__fixunssfsi+0x56>
 3c6:	90 95       	com	r25
 3c8:	80 95       	com	r24
 3ca:	70 95       	com	r23
 3cc:	61 95       	neg	r22
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	8f 4f       	sbci	r24, 0xFF	; 255
 3d2:	9f 4f       	sbci	r25, 0xFF	; 255
 3d4:	08 95       	ret

000003d6 <__floatunsisf>:
 3d6:	e8 94       	clt
 3d8:	09 c0       	rjmp	.+18     	; 0x3ec <__floatsisf+0x12>

000003da <__floatsisf>:
 3da:	97 fb       	bst	r25, 7
 3dc:	3e f4       	brtc	.+14     	; 0x3ec <__floatsisf+0x12>
 3de:	90 95       	com	r25
 3e0:	80 95       	com	r24
 3e2:	70 95       	com	r23
 3e4:	61 95       	neg	r22
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	99 23       	and	r25, r25
 3ee:	a9 f0       	breq	.+42     	; 0x41a <__floatsisf+0x40>
 3f0:	f9 2f       	mov	r31, r25
 3f2:	96 e9       	ldi	r25, 0x96	; 150
 3f4:	bb 27       	eor	r27, r27
 3f6:	93 95       	inc	r25
 3f8:	f6 95       	lsr	r31
 3fa:	87 95       	ror	r24
 3fc:	77 95       	ror	r23
 3fe:	67 95       	ror	r22
 400:	b7 95       	ror	r27
 402:	f1 11       	cpse	r31, r1
 404:	f8 cf       	rjmp	.-16     	; 0x3f6 <__floatsisf+0x1c>
 406:	fa f4       	brpl	.+62     	; 0x446 <__floatsisf+0x6c>
 408:	bb 0f       	add	r27, r27
 40a:	11 f4       	brne	.+4      	; 0x410 <__floatsisf+0x36>
 40c:	60 ff       	sbrs	r22, 0
 40e:	1b c0       	rjmp	.+54     	; 0x446 <__floatsisf+0x6c>
 410:	6f 5f       	subi	r22, 0xFF	; 255
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	16 c0       	rjmp	.+44     	; 0x446 <__floatsisf+0x6c>
 41a:	88 23       	and	r24, r24
 41c:	11 f0       	breq	.+4      	; 0x422 <__floatsisf+0x48>
 41e:	96 e9       	ldi	r25, 0x96	; 150
 420:	11 c0       	rjmp	.+34     	; 0x444 <__floatsisf+0x6a>
 422:	77 23       	and	r23, r23
 424:	21 f0       	breq	.+8      	; 0x42e <__floatsisf+0x54>
 426:	9e e8       	ldi	r25, 0x8E	; 142
 428:	87 2f       	mov	r24, r23
 42a:	76 2f       	mov	r23, r22
 42c:	05 c0       	rjmp	.+10     	; 0x438 <__floatsisf+0x5e>
 42e:	66 23       	and	r22, r22
 430:	71 f0       	breq	.+28     	; 0x44e <__floatsisf+0x74>
 432:	96 e8       	ldi	r25, 0x86	; 134
 434:	86 2f       	mov	r24, r22
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	2a f0       	brmi	.+10     	; 0x446 <__floatsisf+0x6c>
 43c:	9a 95       	dec	r25
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	88 1f       	adc	r24, r24
 444:	da f7       	brpl	.-10     	; 0x43c <__floatsisf+0x62>
 446:	88 0f       	add	r24, r24
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	97 f9       	bld	r25, 7
 44e:	08 95       	ret

00000450 <__fp_inf>:
 450:	97 f9       	bld	r25, 7
 452:	9f 67       	ori	r25, 0x7F	; 127
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	08 95       	ret

0000045c <__fp_nan>:
 45c:	9f ef       	ldi	r25, 0xFF	; 255
 45e:	80 ec       	ldi	r24, 0xC0	; 192
 460:	08 95       	ret

00000462 <__fp_pscA>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	16 16       	cp	r1, r22
 468:	17 06       	cpc	r1, r23
 46a:	18 06       	cpc	r1, r24
 46c:	09 06       	cpc	r0, r25
 46e:	08 95       	ret

00000470 <__fp_pscB>:
 470:	00 24       	eor	r0, r0
 472:	0a 94       	dec	r0
 474:	12 16       	cp	r1, r18
 476:	13 06       	cpc	r1, r19
 478:	14 06       	cpc	r1, r20
 47a:	05 06       	cpc	r0, r21
 47c:	08 95       	ret

0000047e <__fp_round>:
 47e:	09 2e       	mov	r0, r25
 480:	03 94       	inc	r0
 482:	00 0c       	add	r0, r0
 484:	11 f4       	brne	.+4      	; 0x48a <__fp_round+0xc>
 486:	88 23       	and	r24, r24
 488:	52 f0       	brmi	.+20     	; 0x49e <__fp_round+0x20>
 48a:	bb 0f       	add	r27, r27
 48c:	40 f4       	brcc	.+16     	; 0x49e <__fp_round+0x20>
 48e:	bf 2b       	or	r27, r31
 490:	11 f4       	brne	.+4      	; 0x496 <__fp_round+0x18>
 492:	60 ff       	sbrs	r22, 0
 494:	04 c0       	rjmp	.+8      	; 0x49e <__fp_round+0x20>
 496:	6f 5f       	subi	r22, 0xFF	; 255
 498:	7f 4f       	sbci	r23, 0xFF	; 255
 49a:	8f 4f       	sbci	r24, 0xFF	; 255
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	08 95       	ret

000004a0 <__fp_split3>:
 4a0:	57 fd       	sbrc	r21, 7
 4a2:	90 58       	subi	r25, 0x80	; 128
 4a4:	44 0f       	add	r20, r20
 4a6:	55 1f       	adc	r21, r21
 4a8:	59 f0       	breq	.+22     	; 0x4c0 <__fp_splitA+0x10>
 4aa:	5f 3f       	cpi	r21, 0xFF	; 255
 4ac:	71 f0       	breq	.+28     	; 0x4ca <__fp_splitA+0x1a>
 4ae:	47 95       	ror	r20

000004b0 <__fp_splitA>:
 4b0:	88 0f       	add	r24, r24
 4b2:	97 fb       	bst	r25, 7
 4b4:	99 1f       	adc	r25, r25
 4b6:	61 f0       	breq	.+24     	; 0x4d0 <__fp_splitA+0x20>
 4b8:	9f 3f       	cpi	r25, 0xFF	; 255
 4ba:	79 f0       	breq	.+30     	; 0x4da <__fp_splitA+0x2a>
 4bc:	87 95       	ror	r24
 4be:	08 95       	ret
 4c0:	12 16       	cp	r1, r18
 4c2:	13 06       	cpc	r1, r19
 4c4:	14 06       	cpc	r1, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	f2 cf       	rjmp	.-28     	; 0x4ae <__fp_split3+0xe>
 4ca:	46 95       	lsr	r20
 4cc:	f1 df       	rcall	.-30     	; 0x4b0 <__fp_splitA>
 4ce:	08 c0       	rjmp	.+16     	; 0x4e0 <__fp_splitA+0x30>
 4d0:	16 16       	cp	r1, r22
 4d2:	17 06       	cpc	r1, r23
 4d4:	18 06       	cpc	r1, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	f1 cf       	rjmp	.-30     	; 0x4bc <__fp_splitA+0xc>
 4da:	86 95       	lsr	r24
 4dc:	71 05       	cpc	r23, r1
 4de:	61 05       	cpc	r22, r1
 4e0:	08 94       	sec
 4e2:	08 95       	ret

000004e4 <__fp_zero>:
 4e4:	e8 94       	clt

000004e6 <__fp_szero>:
 4e6:	bb 27       	eor	r27, r27
 4e8:	66 27       	eor	r22, r22
 4ea:	77 27       	eor	r23, r23
 4ec:	cb 01       	movw	r24, r22
 4ee:	97 f9       	bld	r25, 7
 4f0:	08 95       	ret

000004f2 <__mulsf3>:
 4f2:	0a d0       	rcall	.+20     	; 0x508 <__mulsf3x>
 4f4:	c4 cf       	rjmp	.-120    	; 0x47e <__fp_round>
 4f6:	b5 df       	rcall	.-150    	; 0x462 <__fp_pscA>
 4f8:	28 f0       	brcs	.+10     	; 0x504 <__mulsf3+0x12>
 4fa:	ba df       	rcall	.-140    	; 0x470 <__fp_pscB>
 4fc:	18 f0       	brcs	.+6      	; 0x504 <__mulsf3+0x12>
 4fe:	95 23       	and	r25, r21
 500:	09 f0       	breq	.+2      	; 0x504 <__mulsf3+0x12>
 502:	a6 cf       	rjmp	.-180    	; 0x450 <__fp_inf>
 504:	ab cf       	rjmp	.-170    	; 0x45c <__fp_nan>
 506:	ef cf       	rjmp	.-34     	; 0x4e6 <__fp_szero>

00000508 <__mulsf3x>:
 508:	cb df       	rcall	.-106    	; 0x4a0 <__fp_split3>
 50a:	a8 f3       	brcs	.-22     	; 0x4f6 <__mulsf3+0x4>

0000050c <__mulsf3_pse>:
 50c:	99 23       	and	r25, r25
 50e:	d9 f3       	breq	.-10     	; 0x506 <__mulsf3+0x14>
 510:	55 23       	and	r21, r21
 512:	c9 f3       	breq	.-14     	; 0x506 <__mulsf3+0x14>
 514:	95 0f       	add	r25, r21
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	55 1f       	adc	r21, r21
 51a:	aa 27       	eor	r26, r26
 51c:	ee 27       	eor	r30, r30
 51e:	ff 27       	eor	r31, r31
 520:	bb 27       	eor	r27, r27
 522:	00 24       	eor	r0, r0
 524:	08 94       	sec
 526:	67 95       	ror	r22
 528:	20 f4       	brcc	.+8      	; 0x532 <__mulsf3_pse+0x26>
 52a:	e2 0f       	add	r30, r18
 52c:	f3 1f       	adc	r31, r19
 52e:	b4 1f       	adc	r27, r20
 530:	0a 1e       	adc	r0, r26
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	44 1f       	adc	r20, r20
 538:	aa 1f       	adc	r26, r26
 53a:	66 95       	lsr	r22
 53c:	a9 f7       	brne	.-22     	; 0x528 <__mulsf3_pse+0x1c>
 53e:	77 95       	ror	r23
 540:	30 f4       	brcc	.+12     	; 0x54e <__mulsf3_pse+0x42>
 542:	f3 0f       	add	r31, r19
 544:	b4 1f       	adc	r27, r20
 546:	0a 1e       	adc	r0, r26
 548:	12 1e       	adc	r1, r18
 54a:	08 f4       	brcc	.+2      	; 0x54e <__mulsf3_pse+0x42>
 54c:	63 95       	inc	r22
 54e:	33 0f       	add	r19, r19
 550:	44 1f       	adc	r20, r20
 552:	aa 1f       	adc	r26, r26
 554:	22 1f       	adc	r18, r18
 556:	76 95       	lsr	r23
 558:	99 f7       	brne	.-26     	; 0x540 <__mulsf3_pse+0x34>
 55a:	87 95       	ror	r24
 55c:	20 f4       	brcc	.+8      	; 0x566 <__mulsf3_pse+0x5a>
 55e:	b4 0f       	add	r27, r20
 560:	0a 1e       	adc	r0, r26
 562:	12 1e       	adc	r1, r18
 564:	63 1f       	adc	r22, r19
 566:	44 0f       	add	r20, r20
 568:	aa 1f       	adc	r26, r26
 56a:	22 1f       	adc	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	86 95       	lsr	r24
 570:	a9 f7       	brne	.-22     	; 0x55c <__mulsf3_pse+0x50>
 572:	86 2f       	mov	r24, r22
 574:	71 2d       	mov	r23, r1
 576:	60 2d       	mov	r22, r0
 578:	11 24       	eor	r1, r1
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	8a f0       	brmi	.+34     	; 0x5a2 <__mulsf3_pse+0x96>
 580:	e1 f0       	breq	.+56     	; 0x5ba <__mulsf3_pse+0xae>
 582:	88 23       	and	r24, r24
 584:	4a f0       	brmi	.+18     	; 0x598 <__mulsf3_pse+0x8c>
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	91 50       	subi	r25, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	a9 f7       	brne	.-22     	; 0x582 <__mulsf3_pse+0x76>
 598:	9e 3f       	cpi	r25, 0xFE	; 254
 59a:	51 05       	cpc	r21, r1
 59c:	70 f0       	brcs	.+28     	; 0x5ba <__mulsf3_pse+0xae>
 59e:	58 cf       	rjmp	.-336    	; 0x450 <__fp_inf>
 5a0:	a2 cf       	rjmp	.-188    	; 0x4e6 <__fp_szero>
 5a2:	5f 3f       	cpi	r21, 0xFF	; 255
 5a4:	ec f3       	brlt	.-6      	; 0x5a0 <__mulsf3_pse+0x94>
 5a6:	98 3e       	cpi	r25, 0xE8	; 232
 5a8:	dc f3       	brlt	.-10     	; 0x5a0 <__mulsf3_pse+0x94>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	e7 95       	ror	r30
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c1 f7       	brne	.-16     	; 0x5aa <__mulsf3_pse+0x9e>
 5ba:	fe 2b       	or	r31, r30
 5bc:	88 0f       	add	r24, r24
 5be:	91 1d       	adc	r25, r1
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__udivmodhi4>:
 5c8:	aa 1b       	sub	r26, r26
 5ca:	bb 1b       	sub	r27, r27
 5cc:	51 e1       	ldi	r21, 0x11	; 17
 5ce:	07 c0       	rjmp	.+14     	; 0x5de <__udivmodhi4_ep>

000005d0 <__udivmodhi4_loop>:
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	a6 17       	cp	r26, r22
 5d6:	b7 07       	cpc	r27, r23
 5d8:	10 f0       	brcs	.+4      	; 0x5de <__udivmodhi4_ep>
 5da:	a6 1b       	sub	r26, r22
 5dc:	b7 0b       	sbc	r27, r23

000005de <__udivmodhi4_ep>:
 5de:	88 1f       	adc	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	5a 95       	dec	r21
 5e4:	a9 f7       	brne	.-22     	; 0x5d0 <__udivmodhi4_loop>
 5e6:	80 95       	com	r24
 5e8:	90 95       	com	r25
 5ea:	bc 01       	movw	r22, r24
 5ec:	cd 01       	movw	r24, r26
 5ee:	08 95       	ret

000005f0 <_exit>:
 5f0:	f8 94       	cli

000005f2 <__stop_program>:
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <__stop_program>
